//@author: a0114255n



	/**
	 * origin: C:\Users\nathan\Documents\CS2103\Final Submission\CommandParser.cpp
	 */

#include "CommandParser.h"

#include <atltime.h>
#include <math.h>
#include <locale>
#include <ctime>

using namespace std;

const string CommandParser::FILEPATH = "filepath";
const string CommandParser::FILENAME = "filename";
const string CommandParser::FLOATING_TASK = "FloatingTask";
const string CommandParser::DEADLINE_TASK = "DeadlineTask";
const string CommandParser::TIMED_TASK = "TimedTask";

const string CommandParser::ADD = "add";
const string CommandParser::COMMAND_DELETE = "delete";
const string CommandParser::DISPLAY = "display";
const string CommandParser::DONE = "done";
const string CommandParser::EDIT = "edit";
const string CommandParser::EXIT = "exit";
const string CommandParser::NOT_DONE = "notdone";
const string CommandParser::SEARCH = "search";
const string CommandParser::SORT = "sort";
const string CommandParser::UNDO = "undo";
const string CommandParser::VIEW = "view";

const string CommandParser::DATE = "date";
const string CommandParser::NAME = "name";
const string CommandParser::TIME = "time";
const string CommandParser::TODAY = "today";
const string CommandParser::TOMORROW = "tomorrow";
const string CommandParser::MONDAY = "monday";
const string CommandParser::MON = "mon";
const string CommandParser::TUESDAY = "tuesday";
const string CommandParser::TUE = "tue";
const string CommandParser::WEDNESDAY = "wednesday";
const string CommandParser::WED = "wed";
const string CommandParser::THURSDAY = "thursday";
const string CommandParser::THU = "thu";
const string CommandParser::FRIDAY = "friday";
const string CommandParser::FRI = "fri";
const string CommandParser::SATURDAY = "saturday";
const string CommandParser::SAT = "sat";
const string CommandParser::SUNDAY = "sunday";
const string CommandParser::SUN = "sun";

string CommandParser::taskType="";
string CommandParser::commandType="";
string CommandParser::name="";
int CommandParser::year=-1;
int CommandParser::month=-1;
int CommandParser::day=-1;
int CommandParser::startTimeHour=-1;
int CommandParser::startTimeMin=-1;
int CommandParser::endTimeHour=-1;
int CommandParser::endTimeMin=-1;
string CommandParser::dayOfWeek;
int CommandParser::dayOfWeekNo;
int CommandParser::number=-1;
string CommandParser::attribute="";
string devider = "/";
size_t pos1;
size_t pos2;
size_t pos3;
size_t pos4;
size_t posD1;
size_t posD2;
size_t posD3;
size_t posD4;
size_t posD5;
size_t posD6;
size_t posD7;
int dayToAdd;


void CommandParser::addTimeDeadline(string userInput){
	taskType = DEADLINE_TASK;
	startTimeHour = 0;
	startTimeMin = 0;
	endTimeHour = stoi(userInput.substr(posD1+1, (posD2-posD1)));
	endTimeMin = stoi(userInput.substr(posD2+1, (posD3-posD2)));
}

void CommandParser::addTimeTimedTask(string userInput){
	taskType = TIMED_TASK;
	startTimeHour = stoi(userInput.substr(posD1+1, (posD2-posD1)));
	startTimeMin = stoi(userInput.substr(posD2+1, (posD3-posD2)));
	endTimeHour = stoi(userInput.substr(posD3+1, (posD4-posD3)));
	endTimeMin = stoi(userInput.substr(posD4+1, (posD5-posD4)));
}

void CommandParser::normalAddDate(string userInput){
	year = stoi(userInput.substr(pos1+1, (posD1-pos1)));
	month = stoi(userInput.substr(posD1+1, (posD2-posD1)));
	day =  stoi(userInput.substr(posD2+1, (posD3-posD2)));
}

void CommandParser::getDayOfWeekNo(string dayOfWeek){
	transform(dayOfWeek.begin(), dayOfWeek.end(), dayOfWeek.begin(), ::tolower);
	if (dayOfWeek == MONDAY || dayOfWeek == MON){
		dayOfWeekNo = 1;
	} else if (dayOfWeek == TUESDAY || dayOfWeek == TUE){
		dayOfWeekNo = 2;
	} else if (dayOfWeek == WEDNESDAY || dayOfWeek == WED){
		dayOfWeekNo = 3;
	} else if (dayOfWeek == THURSDAY || dayOfWeek == THU){
		dayOfWeekNo = 4;
	} else if (dayOfWeek == FRIDAY || dayOfWeek == FRI){
		dayOfWeekNo = 5;
	} else if (dayOfWeek == SATURDAY || dayOfWeek == SAT){
		dayOfWeekNo = 6;
	} else if (dayOfWeek == SUNDAY || dayOfWeek == SUN){
		dayOfWeekNo = 0;
	}
}

void CommandParser::getDayToAdd(int localWeekday){
	if (localWeekday > dayOfWeekNo){
		dayToAdd = 7 - abs(dayOfWeekNo - localWeekday);
	} else {
		dayToAdd = dayOfWeekNo - localWeekday;
	}
}

void CommandParser::setTodayDate(){
	time_t now = time(0);	
	struct tm time;
	localtime_s(&time, &now);
	day =  time.tm_mday;
	month = time.tm_mon + 1;
	year = time.tm_year + 1900;
}

void CommandParser::setTomorrowDate(){
	time_t now = time(0);	
	struct tm time;
	localtime_s(&time, &now);
	time.tm_mday += 1;
	mktime(&time);
	day =  time.tm_mday;
	month = time.tm_mon + 1;
	year = time.tm_year + 1900;
}

void CommandParser::setDayDate(){
	dayOfWeekNo = 0;
	getDayOfWeekNo(dayOfWeek);

	time_t now = time(0);	
	dayToAdd = 0;
	struct tm time;
	localtime_s(&time, &now);
	getDayToAdd(time.tm_wday);
	time.tm_mday =  time.tm_mday + dayToAdd;

	mktime(&time);
	day = time.tm_mday;
	month = time.tm_mon + 1;
	year = time.tm_year + 1900;
}

void CommandParser::easyAddDate(string userInput){
	string todayOrTomorrow = userInput.substr(pos1+1, (posD1-pos1-1));
	transform(todayOrTomorrow.begin(), todayOrTomorrow.end(), todayOrTomorrow.begin(), ::tolower);
	
	if (todayOrTomorrow == TODAY){
		setTodayDate();
	} else if (todayOrTomorrow == TOMORROW){
		setTomorrowDate();	
	} else {
		dayOfWeek = userInput.substr(pos1+1, (posD1-pos1-1));
		setDayDate();
	}
}

void CommandParser::setDevider(string userInput){
	devider = ' ';
	pos1 = userInput.find(devider);
	pos2 = userInput.find(devider, pos1+1);
	pos3 = userInput.find(devider, pos2+1);
	pos4 = userInput.find(devider, pos3+1);

	devider = '/';
	posD1 = userInput.find(devider);
	posD2 = userInput.find(devider, posD1+1);
	posD3 = userInput.find(devider, posD2+1);
	posD4 = userInput.find(devider, posD3+1);
	posD5 = userInput.find(devider, posD4+1);
	posD6 = userInput.find(devider, posD5+1);
	posD7 = userInput.find(devider, posD6+1);
}

void CommandParser::extractCommandType(string userInput){
	setDevider(userInput);
	commandType = userInput.substr(0, pos1);
	transform(commandType.begin(), commandType.end(), commandType.begin(), ::tolower);
}

bool isFloating(){
	if(posD1 == string::npos){
		return true;
	} else {
		return false;
	}
}

bool isUsingEasyAdd(string userInput){
	if(isalpha(userInput.at(pos1+1))){
		return true;
	} else {
		return false;
	}
}

bool isAddingDeadlineTask(){
	if (posD4 == string::npos){
		return true;
	} else {
		return false;
	}
}

void CommandParser::easyAdd(string userInput){
	easyAddDate(userInput);

	if(isAddingDeadlineTask()) {
		addTimeDeadline(userInput);
		name = userInput.substr(posD3+1);
	} else {
		addTimeTimedTask(userInput);
		name = userInput.substr(posD5+1);
	}	
}

void CommandParser::normalAdd(string userInput){
	normalAddDate(userInput);
	string cutInput = userInput.substr(posD3);
	setDevider(cutInput);
	if(isAddingDeadlineTask()) {
		addTimeDeadline(cutInput);
		name = cutInput.substr(posD3+1);
	} else {
		addTimeTimedTask(cutInput);
		name = cutInput.substr(posD5+1);
	}	
}

bool isByName(string userInput){
	if(isalpha(userInput.at(pos1+1))){
		return true;
	} else {
		return false;
	}
}

void CommandParser::addingTask(string userInput){
	if(isFloating()) {
		taskType = FLOATING_TASK;
		name = userInput.substr(3);
		return;
	} else {
		if (isUsingEasyAdd(userInput)){
			easyAdd(userInput);
		} else {
			normalAdd(userInput);
		}	
	}
}

void CommandParser::executeByNumberOrName(string userInput){
	if (isByName(userInput)) {
		name = userInput.substr(pos1+1);
		number = -1;
	} else {
		number = stoi(userInput.substr(pos1+1));
	}
}

void CommandParser::editName(string userInput){
	name = userInput.substr(pos3+1);
}

void CommandParser::editDate(string userInput){
	//userInput == edit 3 date ......
	string cutInput = userInput.substr(pos2+1);
	//cutInput == date .....
	setDevider(cutInput);
	
	if ((isUsingEasyAdd(cutInput) && posD1==string::npos) || (!isUsingEasyAdd(cutInput) && posD3==string::npos)){
		if(isUsingEasyAdd(cutInput)){
				easyAddDate(cutInput);
			} else{
				normalAddDate(cutInput);
			}
	} else {
		editFloatDateTime(cutInput);
	}
}

void CommandParser::editFloatDateTime(string cutInput){
	if(isUsingEasyAdd(cutInput)){
		easyAddDate(cutInput);
		if(posD3 == string::npos) {
			addTimeDeadline(cutInput);
			taskType = FLOATING_TASK;
			return;
		} else {
			addTimeTimedTask(cutInput);
			taskType = FLOATING_TASK;
			return;
		}	

	} else{
		normalAddDate(cutInput);
		string cutInput2 = cutInput.substr(posD3);
		setDevider(cutInput2);
		if(posD3 == string::npos) {
			addTimeDeadline(cutInput2);
			taskType = FLOATING_TASK;
		} else {
			addTimeTimedTask(cutInput2);
			taskType = FLOATING_TASK;
		}	
	}
}

void CommandParser::editTime(string userInput){
	string cutInput = userInput.substr(pos2+1);
	//cutInput == time ....
	setDevider(cutInput);

	if (!isUsingEasyAdd(cutInput) && posD4==string::npos){
		string cutInput2 = cutInput.substr(pos1+1);
		cutInput2 = '/' + cutInput2; // so we can use the addTimeDeadline or addTimeTimedTask
		setDevider(cutInput2);
		if(posD3 == string::npos){
			addTimeDeadline(cutInput2);
		} else {
			addTimeTimedTask(cutInput2);
		}
	} else {
		editFloatDateTime(cutInput);
	} 
}

void CommandParser::editingTask(string userInput){
	setDevider(userInput);
	try{
		if(!isdigit(userInput.at(pos1+1))){
			throw -1;
		}
	} 
	catch(int& e){
		return;
	}
	number = stoi(userInput.substr(pos1+1, pos2-pos1-1));
	attribute = userInput.substr(pos2+1, pos3-pos2-1);
	transform(attribute.begin(), attribute.end(), attribute.begin(), ::tolower);
		
	if (attribute == NAME){
		editName(userInput);
	} else if (attribute == DATE){
		editDate(userInput);
	} else if (attribute == TIME){
		editTime(userInput);	
	}
}

void CommandParser::identifyTask(string userInput) {
	
	extractCommandType(userInput);
	
		if(commandType == FILEPATH){
			name = userInput.substr(pos1+1);
		} else if(commandType == FILENAME){
			name = userInput.substr(pos1+1);
		} else if(commandType == ADD){
			addingTask(userInput);
		} else if (commandType == COMMAND_DELETE || commandType == DONE || commandType == NOT_DONE || commandType == SEARCH) {
			executeByNumberOrName(userInput);
		} else if (commandType == SORT || commandType == DISPLAY || commandType == UNDO) {
			return;
		} else if (commandType == EDIT){
			editingTask(userInput);
		} else if (commandType == VIEW){
			viewTask(userInput);
		} else if (commandType == EXIT) {
			return;
		} 
	
}

void CommandParser::viewTask(string userInput){
	name = userInput.substr(pos1+1);
	transform(name.begin(), name.end(), name.begin(), ::tolower);
}

string CommandParser::getCommandType() {
	return commandType;
}

string CommandParser::getTaskType() {
	return taskType;
}

string CommandParser::getDate() {
	stringstream s;
	s << year << "/" << month << "/" << day;
	return s.str();
}

string CommandParser::getName() {
	return  name;
}

int CommandParser::getEndTimeHour() {
	return endTimeHour;
}

int CommandParser::getEndTimeMin() {
	return endTimeMin;
}

int CommandParser::getStartTimeHour() {
	return startTimeHour;
}

int CommandParser::getStartTimeMin() {
	return startTimeMin;
}

int CommandParser::getYear(){
	return year;
}

CommandParser::CommandParser(void) { }

CommandParser::~CommandParser(void) { }

	// End of segment: C:\Users\nathan\Documents\CS2103\Final Submission\CommandParser.cpp





	/**
	 * origin: C:\Users\nathan\Documents\CS2103\Final Submission\EasyScheduleLogic.cpp
	 */

void EasyScheduleLogic::parsingCommand(string userInput) {
	
	parser.identifyTask(userInput);
	commandType = parser.commandType;
	taskType = parser.taskType;
	name = parser.name;
	year = parser.year;
	month = parser.month;
	day = parser.day;
}

	// End of segment: C:\Users\nathan\Documents\CS2103\Final Submission\EasyScheduleLogic.cpp





	/**
	 * origin: C:\Users\nathan\Documents\CS2103\Final Submission\EasyScheduleLogic.cpp
	 */

void EasyScheduleLogic::creatingTask() {
	if(taskType == FLOATING_TASK) {
		task = Task(commandType, name);
		if((task.getName()).find_first_not_of(' ') != std::string::npos){
			isInvalidTaskType = false;
		} else {
			isInvalidTaskType = true;	
		}
	} else {
		
		endTimeHour = parser.endTimeHour;
		endTimeMin = parser.endTimeMin;

		if (taskType == DEADLINE_TASK) {
			task = Task(commandType,  name, year, month, day, endTimeHour, endTimeMin);
		} else if (taskType == TIMED_TASK){
			startTimeHour = parser.startTimeHour;
			startTimeMin = parser.startTimeMin;
			task = Task(commandType, name, year, month, day, startTimeHour, startTimeMin, endTimeHour, endTimeMin);
		} else {
			isInvalidTaskType = true; 
		}
	}
}

string EasyScheduleLogic::addingTask(){
	creatingTask(); 
	if(isInvalidTaskType) {
		isInvalidTaskType = false; //for future uses
		return MESSAGE_INVALID_INPUT_NAME;
	} else {
		storingTask();
		if (!storage.isDateValid){
			return MESSAGE_INVALID_DATE;
		} else if(!storage.isTimeValid){
			return MESSAGE_INVALID_TIME;
		} else if (!storage.isSuccess){
			return MESSAGE_ADD_FAIL;
		} else {
			return MESSAGE_ADD;
		}
	}
}

	// End of segment: C:\Users\nathan\Documents\CS2103\Final Submission\EasyScheduleLogic.cpp





	/**
	 * origin: C:\Users\nathan\Documents\CS2103\Final Submission\EasyScheduleLogic.cpp
	 */

string EasyScheduleLogic::editingTask(){
    taskNumber = parser.number;
    string s;
    if (parser.attribute == NAME){
        s = storage.editTaskName(taskNumber, parser.name);
    } else if (parser.attribute == DATE){
        if(parser.taskType == FLOATING_TASK){
            s = storage.editTaskDateTime(taskNumber, parser.year, parser.month, parser.day,parser.startTimeHour, parser.startTimeMin, parser.endTimeHour, parser.endTimeMin);
        } else {
            s = storage.editTaskDate(taskNumber, parser.year, parser.month, parser.day);
        }
    } else if (parser.attribute == TIME){
        if(parser.taskType == FLOATING_TASK){
            s = storage.editTaskDateTime(taskNumber, parser.year, parser.month, parser.day,parser.startTimeHour, parser.startTimeMin, parser.endTimeHour, parser.endTimeMin);
        } else {
            s = storage.editTaskTime(taskNumber,parser.startTimeHour, parser.startTimeMin, parser.endTimeHour, parser.endTimeMin);
        } 
    } else{
        returnMessage = MESSAGE_EDIT_INPUT_ERROR;
        return (s = "");
    }

    if (!storage.isDateValid){
            returnMessage = MESSAGE_INVALID_DATE;
        } else if(!storage.isTimeValid){
            returnMessage = MESSAGE_INVALID_TIME;
        } else if (!storage.isSuccess){
            returnMessage = MESSAGE_EDIT_FAIL;
        } else {
            returnMessage = MESSAGE_EDIT;
        }
    return s;
}


	// End of segment: C:\Users\nathan\Documents\CS2103\Final Submission\EasyScheduleLogic.cpp





	/**
	 * origin: C:\Users\nathan\Documents\CS2103\Final Submission\EasyScheduleLogic.cpp
	 */

#ifndef LOGICTEST
Task EasyScheduleLogic::getTask(){
	return task;
}

string EasyScheduleLogic::getCommandType(){
	return commandType;
}
string EasyScheduleLogic::getTaskType(){
	return taskType;
}

string EasyScheduleLogic::getName(){
	return name;
}

int EasyScheduleLogic::getYear(){
	return year;
}

int EasyScheduleLogic::getMonth(){
	return month;
}

int EasyScheduleLogic::getDay(){
	return day;
}

int EasyScheduleLogic::getStartTimeHour(){
	return startTimeHour;
}

int EasyScheduleLogic::getStartTimeMin(){
	return startTimeMin;
}

int EasyScheduleLogic::getEndTimeHour(){
	return endTimeHour;
}

int EasyScheduleLogic::getEndTimeMin(){
	return endTimeMin;
}

#endif

EasyScheduleLogic::EasyScheduleLogic(void) { }

EasyScheduleLogic::~EasyScheduleLogic(void) { }

	// End of segment: C:\Users\nathan\Documents\CS2103\Final Submission\EasyScheduleLogic.cpp





	/**
	 * origin: C:\Users\nathan\Documents\CS2103\Final Submission\EasyScheduleLogic.h
	 */

	static void parsingCommand(string userInput);
	static void creatingTask();
	// End of segment: C:\Users\nathan\Documents\CS2103\Final Submission\EasyScheduleLogic.h





	/**
	 * origin: C:\Users\nathan\Documents\CS2103\Final Submission\EasyScheduleLogic.h
	 */

	static string addingTask();
	// End of segment: C:\Users\nathan\Documents\CS2103\Final Submission\EasyScheduleLogic.h





	/**
	 * origin: C:\Users\nathan\Documents\CS2103\Final Submission\EasyScheduleLogic.h
	 */

	static string editingTask();
	// End of segment: C:\Users\nathan\Documents\CS2103\Final Submission\EasyScheduleLogic.h





	/**
	 * origin: C:\Users\nathan\Documents\CS2103\Final Submission\EasyScheduleLogic.h
	 */

	static Task getTask();
	static string getCommandType();
	static string getTaskType();
	static string getName();
	static int getTaskNumber();
	static int getYear();
	static int getMonth();
	static int getDay();
	static int getStartTimeHour();
	static int getStartTimeMin();
	static int getEndTimeHour();
	static int getEndTimeMin();
	EasyScheduleLogic(void);
	~EasyScheduleLogic(void);
};

#endif


	// End of segment: C:\Users\nathan\Documents\CS2103\Final Submission\EasyScheduleLogic.h





	/**
	 * origin: C:\Users\nathan\Documents\CS2103\Final Submission\Storage.cpp
	 */

bool Storage::isValidDate(Task task){
	isDateValid = true;
	if ((task.getTaskType() != FLOATING_TASK) && 
		(task.getMonth() < MIN_MONTHS_IN_A_YEAR || task.getMonth() > MAX_MONTHS_IN_A_YEAR ||
		task.getDay() < MIN_DAY_IN_A_MONTH 	|| task.getDay() > MAX_DAYS_IN_A_MONTH[task.getMonth() - SHIFT_BY_ONE])) {
			isDateValid = false;
		}
	return isDateValid;
}

bool Storage::isValidTime(Task task){
	isTimeValid = false;
	if (task.getTaskType() == FLOATING_TASK){
		isTimeValid = true;
		return true;
	} else if(task.getStartTimeHour() < MIN_HOURS_IN_A_DAY || task.getStartTimeHour() > MAX_HOURS_IN_A_DAY){
		return false;
	} else if(task.getStartTimeMin() < MIN_MINUTES_IN_AN_HOUR || task.getStartTimeMin() > MAX_MINUTES_IN_AN_HOUR){
		return false;
	} else if(task.getEndTimeHour() < MIN_HOURS_IN_A_DAY || task.getEndTimeHour() > MAX_HOURS_IN_A_DAY){
		return false;
	} else if(task.getEndTimeMin() < MIN_MINUTES_IN_AN_HOUR || task.getEndTimeMin() > MAX_MINUTES_IN_AN_HOUR){
		return false;
	} else if(task.getStartTimeHour() == task.getEndTimeHour() && task.getStartTimeMin() > task.getEndTimeMin()){
		return false;
	} else if(task.getStartTimeHour() > task.getEndTimeHour()){
		return false;
	} else {
		isTimeValid = true;
		return true;
	}
}



	// End of segment: C:\Users\nathan\Documents\CS2103\Final Submission\Storage.cpp





	/**
	 * origin: C:\Users\nathan\Documents\CS2103\Final Submission\Storage.h
	 */

	static bool isValidDate(Task task);
	static bool isValidTime(Task task);
	// End of segment: C:\Users\nathan\Documents\CS2103\Final Submission\Storage.h





	/**
	 * origin: C:\Users\nathan\Documents\CS2103\Final Submission\Task.cpp
	 */

#include "Task.h"
#include<sstream>

const string Task::NAME_OF_MONTH[12] = {"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"};

Task::Task() { };

Task::Task(string commandType, string taskType, string name, int year, int month, int day, int startTimeHour, int startTimeMin, int endTimeHour, int endTimeMin, bool isDone) {
	_commandType = commandType;
	_taskType = taskType;
	_name = name;
	_year = year;
	_month = month;
	_day = day;
	_startTimeHour = startTimeHour;
	_startTimeMin = startTimeMin;
	_endTimeHour = endTimeHour;
	_endTimeMin = endTimeMin;
	_isDone = isDone;
}


Task::Task(string commandType, string name, int year, int month, int day, int startTimeHour, int startTimeMin, int endTimeHour, int endTimeMin) {
	_isDone = false;
	_taskType = "TimedTask";
	_commandType = commandType;
	_name = name;
	_year = year;
	_month = month;
	_day = day;
	_startTimeHour = startTimeHour;
	_startTimeMin = startTimeMin;
	_endTimeHour = endTimeHour;
	_endTimeMin = endTimeMin;
}

Task::Task(string commandType, string name, int year, int month, int day, int endTimeHour, int endTimeMin) {
	_isDone = false;
	_taskType = "DeadlineTask";
	_commandType = commandType;
	_name = name;
	_year = year;
	_month = month;
	_day = day;
	_endTimeHour = endTimeHour;
	_endTimeMin = endTimeMin;
	_startTimeHour = endTimeHour;
	_startTimeMin = endTimeMin;
}

Task::Task(string commandType, string name):
_commandType(commandType),  _name(name) {
	_isDone = false;
	_taskType = "FloatingTask";
	_year = 99999;
	_month = 0;
	_day = 0;
	_startTimeHour=0;
	_startTimeMin=0;
	_endTimeHour=0;
	_endTimeMin=0;
}

void Task::markDone() {
	_isDone = true;
}

void Task::markNotDone(){
	_isDone = false;
}

void Task::setName(string newName) {
	_name = newName;
}

void Task::setTaskType(string taskType) {
	_taskType = taskType;
}

void Task::setYear(int newYear){
	_year = newYear;
}

void Task::setMonth(int newMonth){
	_month = newMonth;
}

void Task::setDay(int newDay){
	_day = newDay;
}

void Task::setStartTimeHour(int newStartTimeHour){
	_startTimeHour = newStartTimeHour;
}

void Task::setStartTimeMin(int newStartTimeMin){
	_startTimeMin = newStartTimeMin;
}

void Task::setEndTimeHour(int newEndTimeHour){
	_endTimeHour = newEndTimeHour;
}

void Task::setEndTimeMin(int newEndTimeMin){
	_endTimeMin = newEndTimeMin;
}

void Task::setCommandType(string commandType) {
	_commandType = commandType;
}

string Task::getCommandType() {
	return _commandType;
}

string Task::getTaskType() {
	return _taskType;
}

string Task::getDate() {
	stringstream s;
	s << _year << "/" << _month << "/" << _day;
	return s.str();
}

string Task::getAlphaMonth(int monthNumber){
	return NAME_OF_MONTH[monthNumber - 1];
}

string Task::getAlphabetDate(){
	stringstream s;
	s << _day << " " << getAlphaMonth(_month) << " " << _year;
	return s.str();
}

string Task::getName() {
	return _name;
}

int Task::getYear() {
	return _year;
}

int Task::getMonth() {
	return _month;
}

int Task::getDay() {
	return _day;
}

int Task::getEndTimeHour() {
	return _endTimeHour;
}

int Task::getEndTimeMin() {
	return _endTimeMin;
}

int Task::getStartTimeHour() {
	return _startTimeHour;
}

int Task::getStartTimeMin() {
	return _startTimeMin;
}

bool Task::getIsDone(){
	return _isDone;
}

	// End of segment: C:\Users\nathan\Documents\CS2103\Final Submission\Task.cpp





	/**
	 * origin: C:\Users\nathan\Documents\CS2103\Final Submission\UnitTest.cpp
	 */

		TEST_METHOD(parsingCommandTest){
			string userInput = "add 2015/3/25/14/30/submit CS Homework";
			EasyScheduleLogic es;
			es.parsingCommand(userInput);
			string COMMAND_TYPE = "add";
			string TASK_TYPE = "DeadlineTask";
			int YEAR = 2015;
			int MONTH = 3;
			int DAY = 25;
			
			Assert::AreEqual(COMMAND_TYPE, es.getCommandType()); 
			Assert::AreEqual(TASK_TYPE, es.getTaskType());
			Assert::AreEqual(YEAR, es.getYear());
			Assert::AreEqual(MONTH, es.getMonth());
			Assert::AreEqual(DAY, es.getDay());
			
		}

		TEST_METHOD(creatingTaskTest){
			string userInput = "add today/14/30/16/30/CS Homework";
			EasyScheduleLogic es;
			es.parsingCommand(userInput);
			es.creatingTask();

			time_t now = time(0);	
			struct tm time;
			localtime_s(&time, &now);
			int DAY =  time.tm_mday;
			int MONTH = time.tm_mon + 1;
			int YEAR = time.tm_year + 1900;	

			string COMMAND_TYPE = "add";
			string TASK_TYPE = "TimedTask";
			
			int START_TIME_HOUR = 14;
			int START_TIME_MIN = 30;
			int END_TIME_HOUR = 16;
			int END_TIME_MIN = 30;
		
			Assert::AreEqual(COMMAND_TYPE, es.getCommandType());
			Assert::AreEqual(TASK_TYPE, es.getTaskType());
			Assert::AreEqual(YEAR, es.getYear());
			Assert::AreEqual(MONTH, es.getMonth());
			Assert::AreEqual(DAY, es.getDay());
			Assert::AreEqual(START_TIME_HOUR, es.getStartTimeHour());
			Assert::AreEqual(START_TIME_MIN, es.getStartTimeMin());
			Assert::AreEqual(END_TIME_HOUR, es.getEndTimeHour());
			Assert::AreEqual(END_TIME_MIN, es.getEndTimeMin());
		}

		TEST_METHOD(addingTaskTest){
			EasyScheduleLogic es;

			string userInput1 = "add 2015/3/25/14/30/CS Homework";
			es.parsingCommand(userInput1);
			string MESSAGE_ADD = "The task has been stored successfully.";
			Assert::AreEqual(MESSAGE_ADD, es.addingTask());
	
			string MESSAGE_ADD_FAIL = "Sorry, the task is already in the schedule.";
			es.addingTask();
			Assert::AreEqual(MESSAGE_ADD_FAIL, es.addingTask());

			string userInput2 = "add tomorrow/14/30/10/15/swim in the sea";
			es.parsingCommand(userInput2);
			string MESSAGE_INVALID_TIME = "Invalid time.";
			Assert::AreEqual(MESSAGE_INVALID_TIME, es.addingTask());

			string userInput3 = "add 2015/13/31/14/30/CS Homework";
			es.parsingCommand(userInput3);
			string MESSAGE_INVALID_DATE = "Invalid date.";
			Assert::AreEqual(MESSAGE_INVALID_DATE, es.addingTask());

			string userInput4 = "add";
			es.parsingCommand(userInput4);
			string MESSAGE_INVALID_INPUT_NAME = "Invalid task.";
			Assert::AreEqual(MESSAGE_INVALID_INPUT_NAME, es.addingTask());
		}
	};	


	// End of segment: C:\Users\nathan\Documents\CS2103\Final Submission\UnitTest.cpp





	/**
	 * origin: C:\Users\nathan\Documents\CS2103\Final Submission\UnitTest.cpp
	 */

	TEST_CLASS(TaskTest){
	public:

		TEST_METHOD(ConstructorTest){
			Task task("add", "TimedTask", "CS Homework", 2015, 3, 25, 6, 30, 7, 30, false);
			string COMMAND_TYPE = "add";
			string TASK_TYPE = "TimedTask";
			int YEAR = 2015;
			int MONTH = 3;
			int DAY = 25;
			int START_TIME_HOUR = 6;
			int START_TIME_MIN = 30;
			int END_TIME_HOUR = 7;
			int END_TIME_MIN = 30;
		
			Assert::AreEqual(COMMAND_TYPE, task.getCommandType());
			Assert::AreEqual(TASK_TYPE, task.getTaskType());
			Assert::AreEqual(YEAR, task.getYear());
			Assert::AreEqual(MONTH, task.getMonth());
			Assert::AreEqual(DAY, task.getDay());
			Assert::AreEqual(START_TIME_HOUR, task.getStartTimeHour());
			Assert::AreEqual(START_TIME_MIN, task.getStartTimeMin());
			Assert::AreEqual(END_TIME_HOUR, task.getEndTimeHour());
			Assert::AreEqual(END_TIME_MIN, task.getEndTimeMin());
			Assert::IsFalse(task.getIsDone());
		}

	};

	// End of segment: C:\Users\nathan\Documents\CS2103\Final Submission\UnitTest.cpp





